/**
 * ms-supplier-search
 * Supplier Search Microservice
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * Contact: destimo-dev@lists.tui.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { EnvelopeSupplierSearchResult } from '../model/envelopeSupplierSearchResult';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { SupplierSearchControllerServiceInterface } from './supplierSearchController.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class SupplierSearchControllerService implements SupplierSearchControllerServiceInterface {

    protected basePath = 'http://localhost:4000/Suppliers';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Perform a search for a supplier
     * This can only be done by an authenticated user. Example for parameter term: HOTEL
     * @param accommodationChain Accommodation Chain (not supported yet)
     * @param accommodationId Accommodation ID (partially supported)
     * @param accommodationName Accommodation Name (partially supported)
     * @param complianceStatus Compliance Check Status
     * @param geolocation geolocation (now only country supported)
     * @param negotiationGroupLabel Negotiation Group Label
     * @param page which page should be deliviered (default 0 first)
     * @param pageSize page size of intended result (default 50)
     * @param supplierId Supplier Reference Number
     * @param supplierName Supplier Name
     * @param supplierStatus Supplier Status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
// tslint:disable-next-line:max-line-length
public searchSuppliersUsingGET(accommodationChain?: string, accommodationId?: string, accommodationName?: string, complianceStatus?: 'NOT_CHECKED' | 'CLEAR' | 'IN_PROGRESS' | 'UNDER_REVIEW' | 'UNDER_INVESTIGATION' | 'CONDITIONAL_ACCEPTANCE' | 'REJECTED', geolocation?: string, negotiationGroupLabel?: string, page?: number, pageSize?: number, supplierId?: string, supplierName?: string, supplierStatus?: 'DRAFT' | 'VALID' | 'ACCEPTED' | 'UNDER_INVESTIGATION' | 'NONVIABLE' | 'DO_NOT_USE', observe?: 'body', reportProgress?: boolean): Observable<EnvelopeSupplierSearchResult>;
// tslint:disable-next-line:max-line-length
public searchSuppliersUsingGET(accommodationChain?: string, accommodationId?: string, accommodationName?: string, complianceStatus?: 'NOT_CHECKED' | 'CLEAR' | 'IN_PROGRESS' | 'UNDER_REVIEW' | 'UNDER_INVESTIGATION' | 'CONDITIONAL_ACCEPTANCE' | 'REJECTED', geolocation?: string, negotiationGroupLabel?: string, page?: number, pageSize?: number, supplierId?: string, supplierName?: string, supplierStatus?: 'DRAFT' | 'VALID' | 'ACCEPTED' | 'UNDER_INVESTIGATION' | 'NONVIABLE' | 'DO_NOT_USE', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EnvelopeSupplierSearchResult>>;
// tslint:disable-next-line:max-line-length
public searchSuppliersUsingGET(accommodationChain?: string, accommodationId?: string, accommodationName?: string, complianceStatus?: 'NOT_CHECKED' | 'CLEAR' | 'IN_PROGRESS' | 'UNDER_REVIEW' | 'UNDER_INVESTIGATION' | 'CONDITIONAL_ACCEPTANCE' | 'REJECTED', geolocation?: string, negotiationGroupLabel?: string, page?: number, pageSize?: number, supplierId?: string, supplierName?: string, supplierStatus?: 'DRAFT' | 'VALID' | 'ACCEPTED' | 'UNDER_INVESTIGATION' | 'NONVIABLE' | 'DO_NOT_USE', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EnvelopeSupplierSearchResult>>;
// tslint:disable-next-line:max-line-length
public searchSuppliersUsingGET(accommodationChain?: string, accommodationId?: string, accommodationName?: string, complianceStatus?: 'NOT_CHECKED' | 'CLEAR' | 'IN_PROGRESS' | 'UNDER_REVIEW' | 'UNDER_INVESTIGATION' | 'CONDITIONAL_ACCEPTANCE' | 'REJECTED', geolocation?: string, negotiationGroupLabel?: string, page?: number, pageSize?: number, supplierId?: string, supplierName?: string, supplierStatus?: 'DRAFT' | 'VALID' | 'ACCEPTED' | 'UNDER_INVESTIGATION' | 'NONVIABLE' | 'DO_NOT_USE', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accommodationChain !== undefined && accommodationChain !== null) {
            queryParameters = queryParameters.set('accommodationChain', <any>accommodationChain);
        }
        if (accommodationId !== undefined && accommodationId !== null) {
            queryParameters = queryParameters.set('accommodationId', <any>accommodationId);
        }
        if (accommodationName !== undefined && accommodationName !== null) {
            queryParameters = queryParameters.set('accommodationName', <any>accommodationName);
        }
        if (complianceStatus !== undefined && complianceStatus !== null) {
            queryParameters = queryParameters.set('complianceStatus', <any>complianceStatus);
        }
        if (geolocation !== undefined && geolocation !== null) {
            queryParameters = queryParameters.set('geolocation', <any>geolocation);
        }
        if (negotiationGroupLabel !== undefined && negotiationGroupLabel !== null) {
            queryParameters = queryParameters.set('negotiationGroupLabel', <any>negotiationGroupLabel);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (supplierId !== undefined && supplierId !== null) {
            queryParameters = queryParameters.set('supplierId', <any>supplierId);
        }
        if (supplierName !== undefined && supplierName !== null) {
            queryParameters = queryParameters.set('supplierName', <any>supplierName);
        }
        if (supplierStatus !== undefined && supplierStatus !== null) {
            queryParameters = queryParameters.set('supplierStatus', <any>supplierStatus);
        }

        let headers = this.defaultHeaders;

        // authentication (tui-token-jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EnvelopeSupplierSearchResult>(`${this.configuration.basePath}/supplier/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
